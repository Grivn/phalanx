// Code generated by MockGen. DO NOT EDIT.
// Source: crypto.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	protos "github.com/Grivn/phalanx/pkg/common/protos"
	types "github.com/Grivn/phalanx/pkg/common/types"
	external "github.com/Grivn/phalanx/pkg/external"
	gomock "github.com/golang/mock/gomock"
)

// MockCryptoService is a mock of CryptoService interface.
type MockCryptoService struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoServiceMockRecorder
}

// MockCryptoServiceMockRecorder is the mock recorder for MockCryptoService.
type MockCryptoServiceMockRecorder struct {
	mock *MockCryptoService
}

// NewMockCryptoService creates a new mock instance.
func NewMockCryptoService(ctrl *gomock.Controller) *MockCryptoService {
	mock := &MockCryptoService{ctrl: ctrl}
	mock.recorder = &MockCryptoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoService) EXPECT() *MockCryptoServiceMockRecorder {
	return m.recorder
}

// Algorithm mocks base method.
func (m *MockCryptoService) Algorithm() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Algorithm")
	ret0, _ := ret[0].(string)
	return ret0
}

// Algorithm indicates an expected call of Algorithm.
func (mr *MockCryptoServiceMockRecorder) Algorithm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Algorithm", reflect.TypeOf((*MockCryptoService)(nil).Algorithm))
}

// PublicKey mocks base method.
func (m *MockCryptoService) PublicKey() external.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].(external.PublicKey)
	return ret0
}

// PublicKey indicates an expected call of PublicKey.
func (mr *MockCryptoServiceMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockCryptoService)(nil).PublicKey))
}

// Sign mocks base method.
func (m *MockCryptoService) Sign(arg0 types.Hash) (*protos.Certification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0)
	ret0, _ := ret[0].(*protos.Certification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockCryptoServiceMockRecorder) Sign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockCryptoService)(nil).Sign), arg0)
}

// Verify mocks base method.
func (m *MockCryptoService) Verify(arg0 uint64, arg1 *protos.Certification, arg2 types.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockCryptoServiceMockRecorder) Verify(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockCryptoService)(nil).Verify), arg0, arg1, arg2)
}

// MockPrivateKey is a mock of PrivateKey interface.
type MockPrivateKey struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateKeyMockRecorder
}

// MockPrivateKeyMockRecorder is the mock recorder for MockPrivateKey.
type MockPrivateKeyMockRecorder struct {
	mock *MockPrivateKey
}

// NewMockPrivateKey creates a new mock instance.
func NewMockPrivateKey(ctrl *gomock.Controller) *MockPrivateKey {
	mock := &MockPrivateKey{ctrl: ctrl}
	mock.recorder = &MockPrivateKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivateKey) EXPECT() *MockPrivateKeyMockRecorder {
	return m.recorder
}

// Algorithm mocks base method.
func (m *MockPrivateKey) Algorithm() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Algorithm")
	ret0, _ := ret[0].(string)
	return ret0
}

// Algorithm indicates an expected call of Algorithm.
func (mr *MockPrivateKeyMockRecorder) Algorithm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Algorithm", reflect.TypeOf((*MockPrivateKey)(nil).Algorithm))
}

// PublicKey mocks base method.
func (m *MockPrivateKey) PublicKey() external.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].(external.PublicKey)
	return ret0
}

// PublicKey indicates an expected call of PublicKey.
func (mr *MockPrivateKeyMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockPrivateKey)(nil).PublicKey))
}

// Sign mocks base method.
func (m *MockPrivateKey) Sign(arg0 types.Hash) (*protos.Certification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0)
	ret0, _ := ret[0].(*protos.Certification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockPrivateKeyMockRecorder) Sign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockPrivateKey)(nil).Sign), arg0)
}

// MockPublicKeys is a mock of PublicKeys interface.
type MockPublicKeys struct {
	ctrl     *gomock.Controller
	recorder *MockPublicKeysMockRecorder
}

// MockPublicKeysMockRecorder is the mock recorder for MockPublicKeys.
type MockPublicKeysMockRecorder struct {
	mock *MockPublicKeys
}

// NewMockPublicKeys creates a new mock instance.
func NewMockPublicKeys(ctrl *gomock.Controller) *MockPublicKeys {
	mock := &MockPublicKeys{ctrl: ctrl}
	mock.recorder = &MockPublicKeysMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicKeys) EXPECT() *MockPublicKeysMockRecorder {
	return m.recorder
}

// Algorithm mocks base method.
func (m *MockPublicKeys) Algorithm() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Algorithm")
	ret0, _ := ret[0].(string)
	return ret0
}

// Algorithm indicates an expected call of Algorithm.
func (mr *MockPublicKeysMockRecorder) Algorithm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Algorithm", reflect.TypeOf((*MockPublicKeys)(nil).Algorithm))
}

// Verify mocks base method.
func (m *MockPublicKeys) Verify(arg0 uint64, arg1 *protos.Certification, arg2 types.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockPublicKeysMockRecorder) Verify(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPublicKeys)(nil).Verify), arg0, arg1, arg2)
}

// MockPublicKey is a mock of PublicKey interface.
type MockPublicKey struct {
	ctrl     *gomock.Controller
	recorder *MockPublicKeyMockRecorder
}

// MockPublicKeyMockRecorder is the mock recorder for MockPublicKey.
type MockPublicKeyMockRecorder struct {
	mock *MockPublicKey
}

// NewMockPublicKey creates a new mock instance.
func NewMockPublicKey(ctrl *gomock.Controller) *MockPublicKey {
	mock := &MockPublicKey{ctrl: ctrl}
	mock.recorder = &MockPublicKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublicKey) EXPECT() *MockPublicKeyMockRecorder {
	return m.recorder
}

// Algorithm mocks base method.
func (m *MockPublicKey) Algorithm() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Algorithm")
	ret0, _ := ret[0].(string)
	return ret0
}

// Algorithm indicates an expected call of Algorithm.
func (mr *MockPublicKeyMockRecorder) Algorithm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Algorithm", reflect.TypeOf((*MockPublicKey)(nil).Algorithm))
}

// Verify mocks base method.
func (m *MockPublicKey) Verify(arg0 *protos.Certification, arg1 types.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockPublicKeyMockRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPublicKey)(nil).Verify), arg0, arg1)
}
