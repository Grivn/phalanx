// Code generated by MockGen. DO NOT EDIT.
// Source: network.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	protos "github.com/Grivn/phalanx/pkg/common/protos"
	gomock "github.com/golang/mock/gomock"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// BroadcastCommand mocks base method.
func (m *MockSender) BroadcastCommand(command *protos.Command) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastCommand", command)
}

// BroadcastCommand indicates an expected call of BroadcastCommand.
func (mr *MockSenderMockRecorder) BroadcastCommand(command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastCommand", reflect.TypeOf((*MockSender)(nil).BroadcastCommand), command)
}

// BroadcastPCM mocks base method.
func (m *MockSender) BroadcastPCM(message *protos.ConsensusMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastPCM", message)
}

// BroadcastPCM indicates an expected call of BroadcastPCM.
func (mr *MockSenderMockRecorder) BroadcastPCM(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastPCM", reflect.TypeOf((*MockSender)(nil).BroadcastPCM), message)
}

// UnicastPCM mocks base method.
func (m *MockSender) UnicastPCM(message *protos.ConsensusMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnicastPCM", message)
}

// UnicastPCM indicates an expected call of UnicastPCM.
func (mr *MockSenderMockRecorder) UnicastPCM(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnicastPCM", reflect.TypeOf((*MockSender)(nil).UnicastPCM), message)
}
