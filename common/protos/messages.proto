syntax = "proto3";

package protos;

//======================================================
//                 phalanx receiver
//======================================================

// Transaction is a structure for one instruction.
message Transaction {
  // Hash is the identifier.
  string Hash = 1;
  // Payload is the instruction content.
  bytes Payload = 2;
}

// Command is the thing we receive from others.
message Command {
  // Digest indicates the identifier for current command.
  string Digest = 1;
  // Content indicates the instructions in current command.
  repeated Transaction Content = 2;
  // HashList is the list of instructions in current command.
  repeated string HashList = 3;
}

//======================================================
//                 consensus message
//======================================================

enum MessageType {
  PRE_ORDER = 0;
  VOTE = 1;
  QUORUM_CERT = 2;
}

message ConsensusMessage {
  MessageType Type = 1;
  uint64 From = 2;
  uint64 To = 3;
  bytes Payload = 4;
}

//======================================================
//                 order phase
//======================================================

// PreOrder is used to notify others the log order of current node.
message PreOrder {
  // Digest is the identifier of current pre-ordering protocol message, digest = Hash(author, sequence, batch-digest).
  string Digest = 1;
  // Author indicates the identifier of current node.
  uint64 Author = 2;
  // Sequence indicates the order of current log.
  uint64 Sequence = 3;
  // BatchDigest is the digest of tx-batch which is the content of current log.
  string BatchDigest = 4;
  // Timestamp indicates the time when current node generated such a log.
  int64 Timestamp = 5;
}

// Certification is used to verify the pre-ordering message on one node.
message Certification {
  // Signatures are the proof information which is generated by current node, signatures = SIGN(digest).
  repeated bytes Signatures = 1;
}

// Vote is generated by the replica who has received pre-ordering message to determine
// the pre-ordering message valid or not.
message Vote {
  // Author indicates the identifier of current node who has generated vote message.
  uint64 Author = 1;
  // Digest indicates the identifier of pre-ordering message which we have voted for.
  string Digest = 2;
  // Certification is the proof information which is generated by current node, signature = SIGN(digest).
  Certification Certification = 3;
}

// QuorumCert contains the signatures generated by participates which could verify the validation of current message.
message QuorumCert {
  // Certs are the signatures generated by others.
  map<uint64, Certification> Certs = 1;
}

// PartialOrder is a verified log order generated by every node in phalanx cluster which is used to notify others its
// partial log order. it could be generated when current node has received efficient votes from other participates.
message PartialOrder {
  // PreOrder is the message we would like to send a quorum certification.
  PreOrder PreOrder = 1;
  // QC is a proof for current partial order.
  QuorumCert QC = 2;
}

//======================================================
//                 quorum certification
//======================================================

message PartialSet {
  repeated PartialOrder PartialOrders = 1;
}

message PartialOrderBatch {
  uint64 Author = 1;
  repeated PartialSet PartialSet = 2;
  map<string, Command> Commands = 3;
}
