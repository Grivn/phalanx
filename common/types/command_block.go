package types

import (
	"fmt"
	"github.com/Grivn/phalanx/common/protos"
)

// NewInnerBlock generates the phalanx inner block to commit.
func NewInnerBlock(frontNo uint64, safe bool, command *protos.Command, timestamp int64) InnerBlock {
	return InnerBlock{FrontNo: frontNo, Safe: safe, Command: command, Timestamp: timestamp}
}

// InnerBlock is an executed block for phalanx.
type InnerBlock struct {
	// FrontNo is the sequential number for current inner block.
	FrontNo uint64

	// Safe indicates the front set current block belongs to is generated with safe path or not.
	Safe bool

	// SeqNo is the order to commit current block.
	SeqNo uint64

	// Command is the content of current block.
	Command *protos.Command

	// Timestamp is the trusted time for current block generation.
	Timestamp int64
}

func (block InnerBlock) Format() string {
	return fmt.Sprintf("[Block: front-no. %d, command %s, trusted-timestamp %d]", block.FrontNo, block.Command.Format(), block.Timestamp)
}

// FrontStream is the minimal unit for front-order-fairness.
type FrontStream struct {
	// Safe indicates if current front stream is generated by safe path or not.
	Safe bool

	// Stream is the content of front stream.
	Stream CommandStream
}

// SortableInnerBlocks is a slice of inner block to sort.
type SortableInnerBlocks []InnerBlock
func (s SortableInnerBlocks) Len() int {
	return len(s)
}
func (s SortableInnerBlocks) Less(i, j int) bool {
	if s[i].Timestamp == s[j].Timestamp {
		return s[i].Command.Digest < s[j].Command.Digest
	}
	return s[i].Timestamp < s[j].Timestamp
}
func (s SortableInnerBlocks) Swap(i, j int) {
	s[i], s[j] = s[j], s[i]
}
