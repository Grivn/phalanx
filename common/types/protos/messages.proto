syntax = "proto3";

package protos;

//======================================================
//             transaction message
//======================================================

message transaction {
  string hash = 1;
  bytes payload = 2;
}

message batch_id {
  uint64 author = 1;
  string batch_hash = 2;
}

message batch {
  batch_id batch_id = 1;
  repeated string hash_list = 2;
  repeated transaction tx_list = 3;
  int64 timestamp = 4;
}

//======================================================
//             unique identifier message
//======================================================

// UI is a unique identifier assigned to a message by a USIG
message UI {
  // Unique, monotonic, and sequential counter
  uint64 counter = 1;
  // Certificate created by a tamper-proof component of the USIG
  // that certifies the counter assigned to a particular message
  bytes  cert = 2;
}

enum message_type {
  RBC_REQUEST = 0;
  RBC_ECHO = 1;
  RBC_READY = 2;

  ORDERED_LOG = 3;
}

message consensus_message {
  message_type type = 1;
  bytes payload = 2;
}

//======================================================
//           reliable broadcast message
//======================================================

message request {
  string hash = 1;
  uint64 sequence = 2;
  uint64 author = 3;
  batch batch = 4;
}

message echo {
  string hash = 1;
  uint64 sequence = 2;
  uint64 verifier = 3;
}

message ready {
  string hash = 1;
  uint64 sequence = 2;
  uint64 verifier = 3;
}

//======================================================
//                 ordered message
//======================================================

enum order_type {
  REQ = 0;
  LOG = 1;
}

message ordered_msg {
  order_type type = 1;
  uint64 author = 2;
  uint64 sequence = 3;
  batch_id batch_id = 4;
  int64 timestamp = 5;
}

//======================================================
//             communicate message
//======================================================

enum comm_type {
  BATCH = 0;
  ORDER = 1;
  BBA = 2;
}

message comm_msg {
  uint64 author = 1;
  comm_type type = 2;
  bytes payload = 3;
}

//======================================================
//             binary agreement message
//======================================================

enum binary_type {
  TAG = 0;
  QC = 1;
}

message binary_tag {
  uint64 sequence = 1;
  string binary_hash = 2;
  bytes  binary_set = 3;
}

message binary_notification {
  uint64 author = 1;
  binary_type type = 2;
  binary_tag binary_tag = 3;
}
