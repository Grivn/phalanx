// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return _m.recorder
}

// Debug mocks base method
func (_m *MockLogger) Debug(v ...interface{}) {
	_s := []interface{}{}
	for _, _x := range v {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Debug", _s...)
}

// Debug indicates an expected call of Debug
func (_mr *MockLoggerMockRecorder) Debug(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), arg0...)
}

// Debugf mocks base method
func (_m *MockLogger) Debugf(format string, v ...interface{}) {
	_s := []interface{}{format}
	for _, _x := range v {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Debugf", _s...)
}

// Debugf indicates an expected call of Debugf
func (_mr *MockLoggerMockRecorder) Debugf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), _s...)
}

// Info mocks base method
func (_m *MockLogger) Info(v ...interface{}) {
	_s := []interface{}{}
	for _, _x := range v {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Info", _s...)
}

// Info indicates an expected call of Info
func (_mr *MockLoggerMockRecorder) Info(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), arg0...)
}

// Infof mocks base method
func (_m *MockLogger) Infof(format string, v ...interface{}) {
	_s := []interface{}{format}
	for _, _x := range v {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Infof", _s...)
}

// Infof indicates an expected call of Infof
func (_mr *MockLoggerMockRecorder) Infof(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), _s...)
}

// Notice mocks base method
func (_m *MockLogger) Notice(v ...interface{}) {
	_s := []interface{}{}
	for _, _x := range v {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Notice", _s...)
}

// Notice indicates an expected call of Notice
func (_mr *MockLoggerMockRecorder) Notice(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Notice", reflect.TypeOf((*MockLogger)(nil).Notice), arg0...)
}

// Noticef mocks base method
func (_m *MockLogger) Noticef(format string, v ...interface{}) {
	_s := []interface{}{format}
	for _, _x := range v {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Noticef", _s...)
}

// Noticef indicates an expected call of Noticef
func (_mr *MockLoggerMockRecorder) Noticef(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Noticef", reflect.TypeOf((*MockLogger)(nil).Noticef), _s...)
}

// Warning mocks base method
func (_m *MockLogger) Warning(v ...interface{}) {
	_s := []interface{}{}
	for _, _x := range v {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Warning", _s...)
}

// Warning indicates an expected call of Warning
func (_mr *MockLoggerMockRecorder) Warning(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Warning", reflect.TypeOf((*MockLogger)(nil).Warning), arg0...)
}

// Warningf mocks base method
func (_m *MockLogger) Warningf(format string, v ...interface{}) {
	_s := []interface{}{format}
	for _, _x := range v {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Warningf", _s...)
}

// Warningf indicates an expected call of Warningf
func (_mr *MockLoggerMockRecorder) Warningf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Warningf", reflect.TypeOf((*MockLogger)(nil).Warningf), _s...)
}

// Error mocks base method
func (_m *MockLogger) Error(v ...interface{}) {
	_s := []interface{}{}
	for _, _x := range v {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Error", _s...)
}

// Error indicates an expected call of Error
func (_mr *MockLoggerMockRecorder) Error(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), arg0...)
}

// Errorf mocks base method
func (_m *MockLogger) Errorf(format string, v ...interface{}) {
	_s := []interface{}{format}
	for _, _x := range v {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Errorf", _s...)
}

// Errorf indicates an expected call of Errorf
func (_mr *MockLoggerMockRecorder) Errorf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), _s...)
}

// Critical mocks base method
func (_m *MockLogger) Critical(v ...interface{}) {
	_s := []interface{}{}
	for _, _x := range v {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Critical", _s...)
}

// Critical indicates an expected call of Critical
func (_mr *MockLoggerMockRecorder) Critical(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Critical", reflect.TypeOf((*MockLogger)(nil).Critical), arg0...)
}

// Criticalf mocks base method
func (_m *MockLogger) Criticalf(format string, v ...interface{}) {
	_s := []interface{}{format}
	for _, _x := range v {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Criticalf", _s...)
}

// Criticalf indicates an expected call of Criticalf
func (_mr *MockLoggerMockRecorder) Criticalf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Criticalf", reflect.TypeOf((*MockLogger)(nil).Criticalf), _s...)
}
