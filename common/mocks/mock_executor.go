// Code generated by MockGen. DO NOT EDIT.
// Source: executor.go

package mocks

import (
	protos "github.com/Grivn/phalanx/common/protos"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExecuteService is a mock of ExecuteService interface
type MockExecuteService struct {
	ctrl     *gomock.Controller
	recorder *MockExecuteServiceMockRecorder
}

// MockExecuteServiceMockRecorder is the mock recorder for MockExecuteService
type MockExecuteServiceMockRecorder struct {
	mock *MockExecuteService
}

// NewMockExecuteService creates a new mock instance
func NewMockExecuteService(ctrl *gomock.Controller) *MockExecuteService {
	mock := &MockExecuteService{ctrl: ctrl}
	mock.recorder = &MockExecuteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockExecuteService) EXPECT() *MockExecuteServiceMockRecorder {
	return _m.recorder
}

// Execute mocks base method
func (_m *MockExecuteService) Execute(txs []*protos.Transaction, seqNo uint64, timestamp int64) {
	_m.ctrl.Call(_m, "Execute", txs, seqNo, timestamp)
}

// Execute indicates an expected call of Execute
func (_mr *MockExecuteServiceMockRecorder) Execute(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Execute", reflect.TypeOf((*MockExecuteService)(nil).Execute), arg0, arg1, arg2)
}
