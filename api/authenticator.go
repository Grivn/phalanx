package api

import "fmt"

//======= Interface for module 'authentication' ========

// AuthenticationRole defines the authentication roles
type AuthenticationRole int

const (
	// ReplicaAuthen specifies authentication of replica messages
	// signed by using a normal replica node key without utilizing
	// the tamper-proof component
	ReplicaAuthen AuthenticationRole = 1 + iota

	// USIGAuthen specifies authentication of replica messages
	// signed by means of a USIG certificate produced in the
	// tamper-proof component of a replica node. A serialized USIG
	// unique identifier (UI) is used as an authentication tag.
	// This authentication scheme must guarantee that all correct
	// replicas agree on a single USIG instance per replica and
	// only accept UIs generated by that USIG instance.
	USIGAuthen

	// ClientAuthen specifies authentication of client messages
	ClientAuthen
)

func (r AuthenticationRole) String() string {
	switch r {
	case ReplicaAuthen:
		return "replica"
	case USIGAuthen:
		return "usig"
	case ClientAuthen:
		return "client"
	}
	return fmt.Sprintf("AuthenticationRole(%d)", r)
}

// Authenticator manages the identities of the replicas and clients
// and provides an interface to authenticate the message senders as
// well as to generate authentication tags for the message to send.
// Methods of this interface may be invoked from spawned goroutines.
type Authenticator interface {
	// VerifyMessageAuthenTag verifies authenticity of a message,
	// given an authentication tag, ID of replica/client that
	// signed the message, and the authentication role used to
	// generate the tag.
	VerifyMessageAuthenTag(role AuthenticationRole, id uint32, msg []byte, tag []byte) error

	// GenerateMessageAuthenTag generates an authentication tag
	// for the message using the credentials selected by the
	// specified authentication role
	GenerateMessageAuthenTag(role AuthenticationRole, msg []byte) ([]byte, error)
}
