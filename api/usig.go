package api

import (
	"crypto"
	commonProto "github.com/Grivn/phalanx/common/types/protos"
)

// USIG (Unique Sequential Identifier Generator) is a tamper-proof
// component in Phalanx that assigns unique, monotonic, and sequential
// counter to messages and signs it
type USIG interface {
	// CreateUI returns a unique identifier for the specified
	// message. A unique, monotonic, and sequential counter is
	// incremented on each invocation to produce the UI. The first
	// assigned counter value should be one.
	CreateUI(message []byte) (*commonProto.UI, error)

	// VerifyUI verifies if the UI is valid for the message and
	// was generated by the specified USIG identity
	VerifyUI(message []byte, ui *commonProto.UI, usigID []byte) error

	// ID returns the identity of this USIG instance
	ID() []byte

	Enclave
}

type Enclave interface {
	// EnclaveDestroy destroys previously created USIG enclave instance. Must be
	// called only once per each enclave instance
	EnclaveDestroy()

	// EnclaveEpoch retrieves the unique epoch value generated by this USIG
	// enclave instance.
	EnclaveEpoch() uint64

	// EnclavePublicKey retrieves the public part of the key used by USIG enclave
	// instance to sign unique identifiers it produces
	EnclavePublicKey() crypto.PublicKey

	// EnclaveSealedKey retrieves the sealed key used by the USIG enclave. The
	// retrieved key can be supplied to subsequent calls to
	// NewUSIGEnclave() on the same physical machine.
	EnclaveSealedKey() []byte
}
