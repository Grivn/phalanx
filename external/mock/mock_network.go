// Code generated by MockGen. DO NOT EDIT.
// Source: ../network.go

package mocks

import (
	protos "github.com/Grivn/phalanx/common/protos"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNetwork is a mock of Network interface
type MockNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkMockRecorder
}

// MockNetworkMockRecorder is the mock recorder for MockNetwork
type MockNetworkMockRecorder struct {
	mock *MockNetwork
}

// NewMockNetwork creates a new mock instance
func NewMockNetwork(ctrl *gomock.Controller) *MockNetwork {
	mock := &MockNetwork{ctrl: ctrl}
	mock.recorder = &MockNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockNetwork) EXPECT() *MockNetworkMockRecorder {
	return _m.recorder
}

// BroadcastPreOrder mocks base method
func (_m *MockNetwork) BroadcastPreOrder(pre *protos.PreOrder) {
	_m.ctrl.Call(_m, "BroadcastPreOrder", pre)
}

// BroadcastPreOrder indicates an expected call of BroadcastPreOrder
func (_mr *MockNetworkMockRecorder) BroadcastPreOrder(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "BroadcastPreOrder", reflect.TypeOf((*MockNetwork)(nil).BroadcastPreOrder), arg0)
}

// SendVote mocks base method
func (_m *MockNetwork) SendVote(vote *protos.Vote, to uint64) {
	_m.ctrl.Call(_m, "SendVote", vote, to)
}

// SendVote indicates an expected call of SendVote
func (_mr *MockNetworkMockRecorder) SendVote(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SendVote", reflect.TypeOf((*MockNetwork)(nil).SendVote), arg0, arg1)
}

// BroadcastQC mocks base method
func (_m *MockNetwork) BroadcastQC(qc *protos.QuorumCert) {
	_m.ctrl.Call(_m, "BroadcastQC", qc)
}

// BroadcastQC indicates an expected call of BroadcastQC
func (_mr *MockNetworkMockRecorder) BroadcastQC(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "BroadcastQC", reflect.TypeOf((*MockNetwork)(nil).BroadcastQC), arg0)
}
