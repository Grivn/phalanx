package executor

import (
	"github.com/Grivn/phalanx/common/protos"
	"github.com/Grivn/phalanx/common/types"
)

type ExecutionRule interface {
	TryExecution(cmd *protos.Command, qc *protos.QuorumCert) []*types.Block
}

type cmdSet struct {
	cmd *protos.Command
	pre map[string]bool
	qcs []*protos.QuorumCert
}

func newCmdSet(cmd *protos.Command) *cmdSet {
	return &cmdSet{pre: make(map[string]bool), cmd: cmd}
}

func (cs *cmdSet) append(qc *protos.QuorumCert) {
	cs.qcs = append(cs.qcs, qc)
}

func (cs *cmdSet) count() int {
	return len(cs.qcs)
}

func (cs *cmdSet) previous(commandD string) {
	cs.pre[commandD] = true
}

func (cs *cmdSet) committed(commandD string) {
	delete(cs.pre, commandD)
}

type executionRule struct {
	// fault indicates the upper limit for byzantine nodes.
	fault int

	// oneQuorum indicates there is at least one correct replica.
	oneQuorum int

	// quorum indicates the legal size for bft.
	quorum int

	commandSets map[string]*cmdSet

	// oneQuorumSet indicates there is at least one value in current set is generated by correct replica, e.g. f+1.
	oneQuorumSet map[string]bool

	// allQuorumSet indicates current set could be used to decide the final order for transactions, e.g. 2f+1.
	allQuorumSet map[string]bool
}

func newExecutionRule(n int) *executionRule {
	return &executionRule{
		fault:        types.CalculateFault(n),
		oneQuorum:    types.CalculateOneQuorum(n),
		quorum:       types.CalculateQuorum(n),
		commandSets:  make(map[string]*cmdSet),
		oneQuorumSet: make(map[string]bool),
		allQuorumSet: make(map[string]bool),
	}
}

func (er *executionRule) TryExecution(cmd *protos.Command, qc *protos.QuorumCert) []*types.Block {
	set, ok := er.commandSets[qc.CommandDigest()]
	if !ok {
		set = newCmdSet(cmd)
		er.commandSets[qc.CommandDigest()] = set
	}

	set.append(qc)

	if set.count() < er.oneQuorum {
		return nil
	}

	if set.count() == er.oneQuorum {
		er.oneQuorumSet[qc.CommandDigest()] = true
	}

	if set.count() == er.quorum {
		delete(er.allQuorumSet, qc.CommandDigest())
	}

	return nil
}

func (er *executionRule) compare() {

}
