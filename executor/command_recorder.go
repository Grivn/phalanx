package executor

import "github.com/Grivn/phalanx/common/protos"

type commandInfo struct {
	// cmd indicates which command current set is proofed for.
	cmd *protos.Command

	// qcs is used to track the QCs generated by replicas in cluster which contain the partial order information.
	qcs []*protos.PartialOrder

	// pre indicates the commands current command should wait for.
	pre map[string]bool
}

func newCmdSet(cmd *protos.Command) *commandInfo {
	return &commandInfo{pre: make(map[string]bool), cmd: cmd}
}

func (info *commandInfo) append(qc *protos.PartialOrder) {
	info.qcs = append(info.qcs, qc)
}

func (info *commandInfo) count() int {
	return len(info.qcs)
}

func (info *commandInfo) priority(commandD string) {
	info.pre[commandD] = true
}

func (info *commandInfo) priorityCommitted(commandD string) {
	delete(info.pre, commandD)
}

type commandRecorder struct {
	// mapCmd is a map for tracking the command info, including the selected partial order, the priori commands,
	// the content of current command.
	mapCmd map[string]*commandInfo

	// mapCSL is a map for CSL (correct sequenced log), which indicates there is at least one correct replica
	// has given a partial order for current command.
	mapCSL map[string]bool

	// mapQSL is a map for QSL (quorum sequenced log), which indicates there are legal amount replicas have given
	// a partial order for current command which could be used to decide the natural order among commands.
	mapQSL map[string]bool
}

func (recorder *commandRecorder) addPartialOrder() {

}
